#pragma kernel HeightMap
#pragma kernel NormalMap

#include "Simplex.compute"

uint _Seed;
uint _Width;
uint _Height;

int _Octaves = 16;
float _SelfSimilarity = 1.0;
float _Frequency = 1.0;
float _Amplitude = 1.0;
float _Lacunarity = 2.0;
float _Warp = 0;

RWTexture2D<float4> _HeightMap;
RWTexture2D<float4> _NormalMap;


// Use flat plane to get a nice flat area that can be displaced by a really low frequency, low amplitude height map
// Then, intersect the plane with a higher amplitude height map
// Scan the two maps, and interpolate the intersections such that they smoothly transition

float4 fbm(float3 v) {    
    float G = exp2(-_SelfSimilarity);
    float frequency = _Frequency;
    float amp = _Amplitude;
    float noise = 0.0;
    float3 dsum = 0;

    for (int i = 0; i < _Octaves; ++i) {
        float4 n = snoise_grad((v + _Warp * dsum) * frequency) / (1.0 + dot(dsum, dsum));
        dsum += n.xyz;
        noise += amp * n.w;
        frequency *= _Lacunarity;
        amp *= G;
    }

    return float4(noise, dsum);
}

float4 height(uint3 v) {
    float4 h = fbm(float3(v.x, v.y, _Seed));
    return h.x > 0 ? h : 0;
}

[numthreads(8,8,1)]
void HeightMap(uint3 id : SV_DISPATCHTHREADID) {
    _HeightMap[id.xy] = height(id);
}

// Unused, calculate normal map by central difference
[numthreads(8,8,1)]
void NormalMap(uint3 id : SV_DISPATCHTHREADID) {
    float u1 = (id.x == 1)           ? height(id - uint3(1, 0, 0)).x : _HeightMap[id.xy - uint2(1, 0)].r;
    float u2 = (id.x == _Width - 2)  ? height(id + uint3(1, 0, 0)).x : _HeightMap[id.xy + uint2(1, 0)].r;
    float v1 = (id.y == 1)           ? height(id - uint3(0, 1, 0)).x : _HeightMap[id.xy - uint2(0, 1)].r;
    float v2 = (id.y == _Height - 2) ? height(id + uint3(0, 1, 0)).x : _HeightMap[id.xy + uint2(0, 1)].r;

    float3 normal = float3(u1 - u2, 1, v1 - v2);

    if (id.x == 0 || id.x == _Width - 1 || id.y == 0 || id.y == _Height - 1)
        normal = float3(0, 1, 0);

    normal = normalize(normal);
    normal.xyz = (normal.xyz + 1) / 2;

    _NormalMap[id.xy] = float4(normal.x, normal.z, normal.y, 0);
}